Implement a C application for managing airplane landings in an airport. For this you will need to define the structure Flight with the following attributes: flight code (char*), no. of passengers (unsigned int), ETA (char*, given as HH:MM), flight time given in minutes (unsigned int).
1. Create a simple linked list of flights with at least 7 entries for which data is taken from a text file. Each element should be inserted to keep the list sorted in ascending order by the ETA attribute. (2 p)
2. Write the function that prints all the flights in reverse order of their ETA. (1 p)
3. Write the function that returns the number of flights that have the attribute flight time greater than a value given as a parameter. The function is called in the main() and the result is displayed at the console. (1 p)
4. Write a function that returns the average number of passengers for all flights that are to land until a given time, passed as a parameter (HH:MM). The function is called in the main() and the result is displayed at the console. (1 p)
5. Write the function that returns the departure time for a given flight. The flight code is passed as a parameter to the function. The value returned should be listed on the console using the format HH:MM. (1,5 p)
6. Write the function for creating a Binary Search Tree with all the elements in the list. The AVL tree doesn’t share HEAP memory space with the initial list. The function is called in the main() and the elements from the tree are displayed at the console. (2,5 p)
The following indications are mandatory: Functions that are not tested in the main() function are not considered for evaluation; All implementations must be called in the main() function; Projects with compilation issues are NOT going to be evaluated; Source code that is commented is NOT going to be evaluated; The implementation must NOT trigger memory leaks;